@model Ultra.Services.JMeterOutput.RunResults

@{
	ViewBag.Title = "title";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Head
{
	<link type="text/css" rel="stylesheet" href="../../static/css/runs-analysis.css">
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
}

<h2>Load Analysis </h2>

<div id="general_stats">
	<div class="stat-container float">
		<div class="value">@(Model.RunningTime)m</div>
		<div class="description">Running time</div>
	</div>
	<div class="stat-container float">
		<div class="value">@(string.Format("{0:0.0}", Model.Threads.Sum(x => x.GetRequestCount()) / 1000))k</div>
		<div class="description">Requests</div>
	</div>
	<div class="stat-container float">
		<div class="value">@Model.PVS</div>
		<div class="description">Total PVS</div>
	</div>
	<div class="breaker"></div>
</div>

<div id="stat_graphs">
	<div id="distribution_pie" class="float"></div>
	<div class="historgram-area float">
		<div id="percentile_histogram"></div>
@*		@foreach (var threadGroup in Model.Threads)
		{
			<a href="#" class="show-percentile" data-threadgroup="@threadGroup.GetThreadPoolName()">@threadGroup.GetThreadPoolName()</a>@:, 
		}*@
	</div>
</div>

<script type="text/javascript">
	@{
		var i = 0;
		<text>var threads_percentile = [</text>
		foreach (var threadGroup in Model.Threads)
		{
			<text>{ "name": "@threadGroup.GetThreadPoolName()", "percentiles": [</text>
			for (int j = 10; j < 100; j += 10)
			{
				<text>["P_@(j)",@Model.Threads[i].GetPercentileX(j)]</text>
				if (j != 90) { <text>,</text> }
			}
			i++;
			<text>] }</text>
			if (threadGroup != Model.Threads.Last()) {<text>,</text>}
		}
		<text>];</text>
	}
</script>

<script type="text/javascript">
	google.load('visualization', '1.0', {'packages':['corechart']});

	google.setOnLoadCallback(drawDistributionChart);
	google.setOnLoadCallback(drawPercentileHistogram);

	function drawDistributionChart() {
		var data = new google.visualization.DataTable();
		data.addColumn('string', 'Thread Group');
		data.addColumn('number', 'Requests Count');
		data.addRows([
			@for (int c=0; c<Model.Threads.Count(); c++)
			{
				@:['@Model.Threads[c].GetThreadPoolName()', @Model.Threads[c].GetRequestCount()]
				if (c < Model.Threads.Count()-1) { 
					@:, 
				}
			}
		]);

		var options = {
			'title': 'Requests Distribution',
			'legend': { position: 'left', textStyle: { color: 'blue', fontSize: 10 } },
			
			'width':600,
			'height':450};

		var distributionChart = new google.visualization.PieChart(document.getElementById('distribution_pie'));
		distributionChart.draw(data, options);
		google.visualization.events.addListener(distributionChart, 'select', function() {

			var selection = (distributionChart.getSelection())[0];
			var name = threads_percentile[selection.row]['name'];
			var newData = null;
			for (var i = 0; i < threads_percentile.length; i++)
				if (threads_percentile[i]['name'] == name)
					newData = threads_percentile[i];
			for (var i = 0; i < 9; i++)
				percentileData.setValue(i, 1, newData['percentiles'][i][1]);
			percentileChart.draw(percentileData, percentileOptions);
		});
	}
	
	function drawPercentileHistogram() {

		percentileData = new google.visualization.DataTable();
		percentileData.addColumn('string', 'Percentile');
		percentileData.addColumn('number', 'Time');
		percentileData.addRows(threads_percentile[0]['percentiles']);

		percentileOptions = {
			title: 'Percentiles',
			width: 500,
			height: 400,
			legend: 'none',
			chartArea:{height:"55%"},
			bar: { groupWidth: '98%' },
			animation: {
				duration: 750, easing: 'out'
			}
		};

		percentileChart = new google.visualization.ColumnChart(document.getElementById('percentile_histogram'));
		percentileChart.draw(percentileData, percentileOptions);

		$('.show-percentile').click(function() {
			var newData = null;
			for (var i=0; i<threads_percentile.length; i++)
				if (threads_percentile[i]['name'] == $(this).data('threadgroup'))
					newData = threads_percentile[i];
			for (var i = 0; i < 9; i++)
				percentileData.setValue(i, 1, newData['percentiles'][i][1]);
			percentileChart.draw(data, percentileOptions);
		});
	}
</script>