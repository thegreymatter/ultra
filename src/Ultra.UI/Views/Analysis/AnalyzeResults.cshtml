@model Ultra.Services.JMeterOutput.RunResults

@{
	ViewBag.Title = "title";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Head
{
	<link type="text/css" rel="stylesheet" href="../../static/css/runs-analysis.css">
	<script type="text/javascript" src="https://www.google.com/jsapi"></script>
}

<h2>Load Analysis</h2>

<div id="general_stats">
	<div class="stat-container float">
		<div class="value">@(Model.RunningTime)m</div>
		<div class="description">Running time</div>
	</div>
	<div class="stat-container float">
		<div class="value">@(string.Format("{0:0.0}", Model.Threads.Sum(x => x.GetRequestCount()) / 1000))k</div>
		<div class="description">Requests</div>
	</div>
	<div class="stat-container float">
		<div class="value">@Model.PVS</div>
		<div class="description">Total PVS</div>
	</div>
	<div class="breaker"></div>
</div>

<div id="stat_graphs">
	<div id="distribution_pie" class="float"></div>
	<div id="percentile_histogram" class="float"></div>
</div>

<script type="text/javascript">
	@{
		var i = 0;
		<text>var threads_percentile = [</text>
		foreach (var threadGroup in Model.Threads)
		{
			<text>{ "name": "@threadGroup.GetThreadPoolName()", "percentiles": [</text>
			for (int j = 10; j < 100; j += 10)
			{
				<text>["P_@(j)",@Model.Threads[i].GetPercentileX(j)]</text>
				if (j != 90) { <text>,</text> }
			}
			i++;
			<text>] }</text>
			if (threadGroup != Model.Threads.Last()) {<text>,</text>}
		}
		<text>];</text>
	}
</script>

	<script type="text/javascript">
		google.load('visualization', '1.0', {'packages':['corechart']});

		google.setOnLoadCallback(drawDistributionChart);
		google.setOnLoadCallback(drawPercentileHistogram);

		function drawDistributionChart() {
			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Thread Group');
			data.addColumn('number', 'Requests Count');
			data.addRows([
				@for (int c=0; c<Model.Threads.Count(); c++)
				{
					@:['@Model.Threads[c].GetThreadPoolName()', @Model.Threads[c].GetRequestCount()]
					if (c < Model.Threads.Count()-1) { 
						@:, 
					}
				}
			]);

			var options = {
				'title': 'Requests Distribution',
				'legend': 'none',
				'width':300,
				'height':300};

			var chart = new google.visualization.PieChart(document.getElementById('distribution_pie'));
			chart.draw(data, options);
		}
	
		function drawPercentileHistogram() {

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Percentile');
			data.addColumn('number', 'Time');
			data.addRows(threads_percentile[0]['percentiles']);

			var options = {
				title: 'Percentiles',
				width: 600,
				height: 300,
				legend: 'none',
				bar: { groupWidth: '98%' }
			};

			var chart = new google.visualization.ColumnChart(document.getElementById('percentile_histogram'));
			chart.draw(data, options);
		}
	</script>